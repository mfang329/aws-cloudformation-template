---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: Create 1 public and 2 private subnets in 3AZs Regions without a NAT Gateway route for private subnets.'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - ClassB
Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16), enter 2nd octet value'
    Type: Number
    Default: 210
    ConstraintDescription: 'Must be in the range [210-250]'
    MinValue: 210
    MaxValue: 250
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]]  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Tier 1    
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.0.0/23'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public-A'
      - Key: Reach
        Value: public
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.2.0/23'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public-B'
      - Key: Reach
        Value: public
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

  SubnetCPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.4.0/23'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public-C'
      - Key: Reach
        Value: public
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 
              
  # Tier 2     
  SubnetAPrivateT2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.32.0/23'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'App-A'
      - Key: Reach
        Value: private
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]]   

  SubnetBPrivateT2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.34.0/23'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'App-B'
      - Key: Reach
        Value: private
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

  SubnetCPrivateT2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.36.0/23'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'App-C'
      - Key: Reach
        Value: private
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]]  

   # Tier 3     
  SubnetAPrivateT3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.64.0/23'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Data-A'
      - Key: Reach
        Value: private
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

  SubnetBPrivateT3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.66.0/23'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Data-B'
      - Key: Reach
        Value: private
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 


  SubnetCPrivateT3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.68.0/23'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Data-C'
      - Key: Reach
        Value: private
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

  # Public WEB route table
  RouteTablePublic: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public-RouteTable'
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

  # Private AZ-A route table      
  RouteTableAPrivate: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private-RouteTable-A'
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

   # Private AZ-B route table     
  RouteTableBPrivate: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private-RouteTable-B'
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

   # Private AZ-C route table     
  RouteTableCPrivate: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private-RouteTable-C'
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 

#  RouteTableBPublic:
#    Type: 'AWS::EC2::RouteTable'
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#      - Key: Name
#        Value: 'B Public'
#  RouteTableBPrivate:
#    Type: 'AWS::EC2::RouteTable'
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#      - Key: Name
#       Value: 'B Private'

  # Route Table Associate Tier 1  
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationCPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      RouteTableId: !Ref RouteTablePublic
  # Route Table Associate Tier 2  
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivateT2
      RouteTableId: !Ref RouteTableAPrivate      
  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivateT2
      RouteTableId: !Ref RouteTableBPrivate
  RouteTableAssociationCPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivateT2
      RouteTableId: !Ref RouteTableCPrivate
  # Route Table Associate Tier 3
  RouteTableAssociationAPrivateT3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivateT3
      RouteTableId: !Ref RouteTableAPrivate     
  RouteTableAssociationBPrivateT3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivateT3
      RouteTableId: !Ref RouteTableBPrivate
  RouteTableAssociationCPrivateT3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivateT3
      RouteTableId: !Ref RouteTableCPrivate

  # Route Table for iGateway    
  RouteTablePublicInternetRoute: # should be RouteTablePublicAInternetRoute, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
#  RouteTablePublicBInternetRoute:
#    Type: 'AWS::EC2::Route'
#    DependsOn: VPCGatewayAttachment
#    Properties:
#      RouteTableId: !Ref RouteTablePublic
#      DestinationCidrBlock: '0.0.0.0/0'
#      GatewayId: !Ref InternetGateway

  #ACL Rules
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public-ACL
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]] 
  NetworkAclApp:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: App-ACL
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]]
  NetworkAclData:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Data-ACL
      - Key: Region
        Value: !Ref "AWS::Region"
      - Key: Environment
        Value: !Select [2, !Split ["-", !Ref "AWS::StackName"]]        

  # ACL Association Tier 1 public          
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationCPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      NetworkAclId: !Ref NetworkAclPublic

  # ACL Association Tier 2    
  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivateT2
      NetworkAclId: !Ref NetworkAclApp
  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivateT2
      NetworkAclId: !Ref NetworkAclApp   
  SubnetNetworkAclAssociationCPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivateT2
      NetworkAclId: !Ref NetworkAclApp

  # ACL Association Tier 3    
  SubnetNetworkAclAssociationAPrivateT3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivateT3
      NetworkAclId: !Ref NetworkAclData
  SubnetNetworkAclAssociationBPrivateT3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivateT3
      NetworkAclId: !Ref NetworkAclData
  SubnetNetworkAclAssociationCPrivateT3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivateT3
      NetworkAclId: !Ref NetworkAclData

  # ACL Public Inbound/Outbound Rules
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  
  # ACL Private App Inbound/Outbound Rules
  NetworkAclEntryInAppAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclApp
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutAppAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclApp
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  # ACL Private Data Inbound/Outbound Rules
  NetworkAclEntryInDataAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclData
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutDataAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclData
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

Outputs:
  TemplateID:
    Description: 'Bluebeam Template id'
    Value: 'vpc-3azs-5tiers'
  AZs:
    Description: 'Number of AZs'
    Value: 3
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  AZC:
    Description: 'AZ of C'
    Value: !Select [2, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZC'      
  ClassB:
    Description: 'Class B.'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${AWS::StackName}-ClassB'
  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic, !Ref SubnetCPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetAPrivateT2, !Ref SubnetBPrivateT2, !Ref SubnetCPrivateT2, !Ref SubnetAPrivateT3, !Ref SubnetBPrivateT3, !Ref SubnetCPrivateT3]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  RouteTableAPrivate: # deprecated in v4, will be removed in v5
    Description: 'Route table A private (deprecated in v4, will be removed in v5).'
    Value: !Ref RouteTableAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableAPrivate'
  RouteTableBPrivate: # deprecated in v4, will be removed in v5
    Description: 'Route table B private (deprecated in v4, will be removed in v5).'
    Value: !Ref RouteTableBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableBPrivate'
  RouteTableCPrivate: # deprecated in v4, will be removed in v5
    Description: 'Route table C private (deprecated in v4, will be removed in v5).'
    Value: !Ref RouteTableCPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableCPrivate'

  RouteTablePublic: # deprecated in v4, will be removed in v5
    Description: 'Route table public (deprecated in v4, will be removed in v5).'
    Value: !Ref RouteTablePublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublic'

  RouteTables:  # possible drop the 'RouteTablePublic' if no downstream is using it
    Description: 'Route table public & private for current VPC.'
    Value: !Join [',', [!Ref RouteTablePublic, !Ref RouteTableAPrivate, !Ref RouteTableBPrivate, !Ref RouteTableCPrivate]]  
    Export:
      Name: !Sub '${AWS::StackName}-RouteTables'

  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'

  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
  SubnetCPublic:
    Description: 'Subnet C public.'
    Value: !Ref SubnetCPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPublic'      

  SubnetAPrivateT2:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivateT2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivateT2'
  SubnetBPrivateT2:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivateT2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivateT2'
  SubnetCPrivateT2:
    Description: 'Subnet C private.'
    Value: !Ref SubnetCPrivateT2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPrivateT2'

  SubnetAPrivateT3:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivateT3
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivateT3'
  SubnetBPrivateT3:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivateT3
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivateT3'
  SubnetCPrivateT3:
    Description: 'Subnet C private.'
    Value: !Ref SubnetCPrivateT3
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPrivateT3'    

  NetworkAclPublic: 
    Description: 'Public ACL'
    Value: !Ref NetworkAclPublic
    Export:
      Name: !Sub '${AWS::StackName}-NetworkAclPublic'
  NetworkAclApp: 
    Description: 'App ACL'
    Value: !Ref NetworkAclApp
    Export:
      Name: !Sub '${AWS::StackName}-NetworkAclApp'       
  NetworkAclData:
    Description: 'Data ACL'
    Value: !Ref NetworkAclData
    Export:
      Name: !Sub '${AWS::StackName}-NetworkAclData'